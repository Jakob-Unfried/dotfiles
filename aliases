

# -----------------------------------------------------
# Misc aliases
# -----------------------------------------------------
alias te="open -a TextEdit"
alias textedit="open -a TextEdit"
alias preview="open -a Preview"
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias finder="open -a Finder"
alias lock="open /System/Library/CoreServices/ScreenSaverEngine.app"
alias ls="ls --color=auto"
alias ll="ls -lah"
alias grep="grep --color=auto"


# -----------------------------------------------------
# Git
# -----------------------------------------------------
# jokes
alias yeet='git push -f --no-verify'
alias yoink='git pull'
# misc
alias g='git'
# rebasing
gri() {
  git rebase -i "HEAD~$1"
}
# gcf : git commit-fixup
gcf() {
  if [ $# -eq 0 ]; then
    git commit --fixup HEAD || return $?
    git rebase -i --autosquash HEAD~2
  elif [ "$1" -eq "-h" ]; then
    echo "Usage: 'gcf [num_commits_back] {options}'"
  else
    git commit --fixup HEAD~"$(($1 - 1))" "${@:2}" || return $?
    git rebase -i --autosquash HEAD~"$(($1 + 1))"
  fi
}
# gcaf : git commit-all-fixup
gcaf() {
  if [ $# -eq 0 ]; then
    git commit --all --fixup HEAD || return $?
    git rebase -i --autosquash HEAD~2
  elif [ "$1" -eq "-h" ]; then
    echo "Usage: 'gcf [num_commits_back] {options}'"
  else
    git commit --all --fixup HEAD~"$(($1 - 1))" "${@:2}" || return $?
    git rebase -i --autosquash HEAD~"$(($1 + 1))"
  fi
}
# gaacf : git commit-all fixup
gaacf() {
  if [ $# -eq 0 ]; then
    git add --all
    git commit --fixup HEAD || return $?
    git rebase -i --autosquash HEAD~2
  elif [ "$1" -eq "-h" ]; then
    echo "Usage: 'gcf [num_commits_back] {options}'"
  else
    git add --all
    git commit --fixup HEAD~"$(($1 - 1))" "${@:2}" || return $?
    git rebase -i --autosquash HEAD~"$(($1 + 1))"
  fi
}
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbi='git rebase --interactive'
alias grbo='git rebase --onto'
alias grbs='git rebase --skip'
# status / diff / ...
gst() {
  git status -s -uall
  echo "$(tput setaf 1)$(git --no-pager stash list --format='%gd (%cr): %gs')$(tput sgr 0)"
}
gstat() {
  git status -b -uall
  echo "$(tput setaf 1)$(git --no-pager stash list --format='%gd (%cr): %gs')$(tput sgr 0)"
}
alias gfs='git fetch; gst'
alias gd='git diff'
alias gds='git diff --staged'
# pull / push / fetch
alias gf='git fetch'
alias gl='git pull'
alias gp='git push'
gpb () {
  curr_branch=$(git branch --show-current)
  [[ "$curr_branch" = "main" ]] && echo "Can not use gpb to push to main" && return
  git push -u origin $curr_branch "$@"
}
alias gpd='git push --dry-run'
# staging / committing
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit --verbose'
alias gc!='git commit --verbose --amend'
alias gcs='echo "Stashing unstaged changes"; gstashu; git commit --verbose'
alias gcs!='echo "Stashing unstaged changes"; gstashu; git commit --verbose --amend'
alias gca='git commit --verbose --all'
alias gca!='git commit --verbose --all --amend'
alias gaac="git add --all; git commit --verbose"
alias gaac!="git add --all; git commit --verbose --amend"
alias gcnv="git commit --verbose --no-verify"
alias gcatmp='git commit --all --no-verify -m "WIP"'
alias gctmp='git commit --no-verify -m "WIP"'
alias gunc='git uncommit'
# branches
alias gb='git branch'
alias gbd='git branch --delete'
alias gbD='git branch --delete --force'
alias gsw='git switch'
alias gswm='git switch main'
alias gsw-='git switch -'
alias gnb="git switch -c"
alias gcp='git cherry-pick'
alias gco='git checkout'
# stash
alias gstash='git stash'
alias gstashs='git stash push --staged'
gstashu () {
  # stash all unstaged changes. extra args go to ``git stash push``.
  git stash push --staged
  git stash push -u "$@"
  git stash pop --index stash@{1}
}
alias gpop="git stash pop -q; gst"
# logs
alias ghh='git hist | nl -bp"\|" -w2 -s" " | grep --color=always -E "WIP|fixup|FIXME|$" | less'
alias glh='git hist | nl -bp"\|" -w2 -s" " | grep --color=always -E "WIP|fixup|FIXME|$" | less'
alias glhg='git hist --graph | nl -bp"\*" -w2 -s" " | grep --color=always -E "WIP|fixup|FIXME|$" | less'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glods='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
alias glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
alias glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
alias glols='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
alias glol='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
alias glo='git log --oneline --decorate'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
# gbst : status for all branches
gbst () {
  git fetch
  git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
  while read local remote
  do
      if [ -z "$remote" ]; then
        echo "$local $(tput setaf 1)[no remote branch]$(tput sgr 0)"
        continue
      fi
      git rev-list --left-right "${local}...${remote}" -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
      LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
      RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
      if [ $LEFT_AHEAD -ne 0 ]; then
        if [ $RIGHT_AHEAD -ne 0 ]; then
          echo "$local [$remote $(tput setaf 2)+$LEFT_AHEAD$(tput sgr 0)/$(tput setaf 1)-$RIGHT_AHEAD$(tput sgr 0)]"
        else
          echo "$local [$remote $(tput setaf 2)+$LEFT_AHEAD$(tput sgr 0)]"
        fi
      else
        if [ $RIGHT_AHEAD -ne 0 ]; then
          echo "$local [$remote $(tput setaf 1)-$RIGHT_AHEAD$(tput sgr 0)]"
        else
          echo "$local [$remote ]"
        fi
      fi
  done
}


# -----------------------------------------------------
# Python
# -----------------------------------------------------
alias p="python"
alias ip="ipython"
alias jl="jupyter lab"
alias pt="pytest -m \"not slow\""
alias ptdb="pytest -x --pdb --pdbcls=IPython.terminal.debugger:Pdb"
alias coa="conda activate"
alias cod="conda deactivate"
alias coi="conda install"
alias coe="conda info --envs"
alias pdb="python -m pdb -c continue"
alias ipdb="ipython --pdb"

nbrun () {
  jupyter nbconvert --execute --inplace \
    --ClearMetadataPreprocessor.enabled=True \
    --ClearMetadataPreprocessor.clear_cell_metadata=True \
    --ClearMetadataPreprocessor.clear_notebook_metadata=True \
    --ClearOutputPreprocessor.remove_metadata_fields="{'execution'}" \
    --NotebookClient.record_timing=False \
    $@
}

lint() {
  # change to repository root if in a git repo
  curr_dir=$(pwd)
  repo_root=$(git rev-parse --show-toplevel 2>&1)
  if [[ $? == 0 ]]; then
    did_cd=true
    echo "Running linting from repo root $repo_root"
    cd $repo_root
  else
    did_cd=false
  fi
  
  # lint
  python -m flake8
  did_custom_linting=False
  if [[ -f tests/linting/python_linting.py ]]; then
    python tests/linting/python_linting.py
    did_custom_linting=True
  fi
  if [[ -f tests/python_linting.py ]]; then
    python tests/python_linting.py
    did_custom_linting=True
  fi
  if $did_custom_linting; then
    echo "Custom linting done"
  else
    echo "No custom linting script found"
  fi
  
  # change back to pwd when cmd was run
  if $did_cd; then
    cd $curr_dir
  fi
}

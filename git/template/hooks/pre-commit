#!/bin/bash

STOP_COMMIT=false

# Check for forbidden patterns in the patch / diff
# ======================================================================================

# Loop over staged files, filter diff to only add added, copied, modified files
for file in $(git diff --staged --name-only --diff-filter=ACM); do
  # check for leftover conflict markers in *whole file*
  # note: only the last grep should be quiet (-q)!
  #       the first one should return the matches, the last only the exit code
  if git show :0:"$file" | ggrep -E "^\+" | ggrep -Eq "^[<>=]{7}"; then
    echo -e "\033[1;31mLeftover conflict markers in $file\033[0m"
    STOP_COMMIT=true
  fi
  if git diff --staged $file | ggrep -E "^\+" | ggrep -Eq "FIXME"; then
    echo -e "\033[1;31mFIXME marker in $file\033[0m"
    STOP_COMMIT=true
  fi
  if git diff --staged $file | ggrep -E "^\+" | ggrep -Eq "breakpoint()|set_trace()"; then
    echo -e "\033[1;31mDebugging breakpoint in $file\033[0m"
    STOP_COMMIT=true
  fi
done

# Python specific stuff
# ======================================================================================

if [ -f pyproject.toml ]
then
  # Run custom linting script
  if [ ! -f tests/linting/python_linting.py ]
  then
    echo "Custom linting script not found."
  elif python tests/linting/python_linting.py &> /dev/null
  then
    echo "Custom linting passed"
  else
    python tests/linting/python_linting.py
    STOP_COMMIT=true
  fi

  # Run flake8 linter
  if python -m flake8 . &> /dev/null
  then
    echo "flake8 passed"
  else
    python -m flake8 .
    STOP_COMMIT=true
  fi
fi

# If there was any error then stop commit
# ======================================================================================

if $STOP_COMMIT; then
  echo -e "\033[1;31mCommit blocked.\033[0m Use '--no-verify' to circumvent the hook and commit anyway."
  exit 1
fi